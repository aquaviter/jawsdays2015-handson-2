{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "KeyPair": {
      "Type": "String",
      "Description": "Your own Key Pair name"
    }
  },
  "Resources": {
    "PowerUserRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement": [ {
            "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "Policies" :[ {
          "PolicyName" : "PowerUserPolicy",
          "PolicyDocument" : {
            "Statement": [ {
              "Sid": "PowerUserStmt",
              "Effect": "Allow",
              "NotAction": "iam:*",
              "Resource": "*"
            } ]
          }
        }]
      }
    },
    "PowerUserProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Roles" : [ { "Ref" : "PowerUserRole" } ]
      }
    },
    "vpc7c688319": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "subnetfa03ed8d": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": "ap-northeast-1c",
        "VpcId": {
          "Ref": "vpc7c688319"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "IoT Handson 2"
          }
        ]
      }
    },
    "igw6800190a": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "doptd66176b4": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "ap-northeast-1.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "acl839267e6": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "vpc7c688319"
        }
      }
    },
    "rtb3e54a15b": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc7c688319"
        }
      }
    },
    "ApplicationServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "FALSE",
        "ImageId": "ami-18869819",
        "IamInstanceProfile": { "Ref" : "PowerUserProfile" },
        "InstanceType": "t2.micro",
        "KeyName": {
	  "Ref": "KeyPair"
	},
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "bastion server"
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "subnetfa03ed8d"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.0.100",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgsggeneral"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
      }
    },
    "s3dxlabresources": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
      }
    },
    "sgsggeneral": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group for general purpose",
        "VpcId": {
          "Ref": "vpc7c688319"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9000",
            "ToPort": "9000",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acl839267e6"
        }
      }
    },
    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acl839267e6"
        }
      }
    },
    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "acl839267e6"
        },
        "SubnetId": {
          "Ref": "subnetfa03ed8d"
        }
      }
    },
    "subnetroute1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "rtb3e54a15b"
        },
        "SubnetId": {
          "Ref": "subnetfa03ed8d"
        }
      }
    },
    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "rtb3e54a15b"
        },
        "GatewayId": {
          "Ref": "igw6800190a"
        }
      }
    },
    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "vpc7c688319"
        },
        "DhcpOptionsId": {
          "Ref": "doptd66176b4"
        }
      }
    },
    "KinesisStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties" : {
        "ShardCount": 1
      }
    }
  },
  "Outputs" : {
    "URL": {
      "Description": "URL to the sample visualization page",
      "Value": { "Fn::Join":["", [
        "http://", { "Fn::GetAtt" : [ "ApplicationServer", "PublicDnsName" ]}, ":9000"
      ]]}
    },
    "SSHCommand": {
      "Value": { "Fn::Join":["", [
        "ssh -i /path/to/ KeyName.pem ec2-user@", { "Fn::GetAtt" : [ "ApplicationServer", "PublicDnsName" ] }
      ]] },
      "Description": "SSH command to connect to the web server"
    },
    "StreamName": {
      "Description" : "The name of the kinesis Stream.",
      "Value": { "Ref": "KinesisStream"}
    }
  },
  "Description": "Template for IoT Handson 2"
}
